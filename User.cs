using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization; // ðŸ”¥ NOVO - para ignore JSON

namespace MinhaApiCrud
{
    public class User
    {
        public int Id { get; set; }
        
        [Required(ErrorMessage = "O nome Ã© obrigatÃ³rio")] // ðŸ”¥ MELHORADO
        [StringLength(100, ErrorMessage = "O nome deve ter no mÃ¡ximo 100 caracteres")] // ðŸ”¥ MELHORADO
        public string Name { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "O email Ã© obrigatÃ³rio")] // ðŸ”¥ MELHORADO
        [EmailAddress(ErrorMessage = "Formato de email invÃ¡lido")] // ðŸ”¥ MELHORADO
        public string Email { get; set; } = string.Empty;
        
        [Range(0, 150, ErrorMessage = "A idade deve estar entre 0 e 150 anos")] // ðŸ”¥ MELHORADO
        public int Age { get; set; }
        
        public DateTime CreatedAt { get; set; }
        
        // ðŸ”¥ðŸ”¥ðŸ”¥ PROPRIEDADES NOVAS (OPCIONAIS - adicione se quiser)
        
        [StringLength(20, ErrorMessage = "O telefone deve ter no mÃ¡ximo 20 caracteres")]
        public string? Phone { get; set; } // ðŸ”¥ NOVO - campo opcional
        
        [JsonIgnore] // ðŸ”¥ NOVO - nÃ£o aparece no JSON de resposta
        public bool IsActive { get; set; } = true; // ðŸ”¥ NOVO - para soft delete
        
        public DateTime? UpdatedAt { get; set; } // ðŸ”¥ NOVO - timestamp de atualizaÃ§Ã£o
        
        // ðŸ”¥ðŸ”¥ðŸ”¥ MÃ‰TODOS ÃšTEIS
        public void UpdateTimestamp()
        {
            UpdatedAt = DateTime.UtcNow;
        }
        
        public void Deactivate()
        {
            IsActive = false;
            UpdateTimestamp();
        }
        
        public void Activate()
        {
            IsActive = true;
            UpdateTimestamp();
        }
        
        // ðŸ”¥ðŸ”¥ðŸ”¥ MÃ‰TODO DE VALIDAÃ‡ÃƒO PERSONALIZADO
        public bool IsValid()
        {
            return !string.IsNullOrEmpty(Name) && 
                   !string.IsNullOrEmpty(Email) && 
                   new EmailAddressAttribute().IsValid(Email) &&
                   Age >= 0 && Age <= 150;
        }
        
        // ðŸ”¥ðŸ”¥ðŸ”¥ OVERRIDE DO ToString() PARA DEBUG
        public override string ToString()
        {
            return $"User [Id={Id}, Name={Name}, Email={Email}, Age={Age}, CreatedAt={CreatedAt:yyyy-MM-dd}]";
        }
    }
    
    // ðŸ”¥ðŸ”¥ðŸ”¥ CLASSE DE DTO PARA CRIAÃ‡ÃƒO (OPCIONAL - para separar concerns)
    public class CreateUserRequest
    {
        [Required(ErrorMessage = "O nome Ã© obrigatÃ³rio")]
        [StringLength(100, ErrorMessage = "O nome deve ter no mÃ¡ximo 100 caracteres")]
        public string Name { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "O email Ã© obrigatÃ³rio")]
        [EmailAddress(ErrorMessage = "Formato de email invÃ¡lido")]
        public string Email { get; set; } = string.Empty;
        
        [Range(0, 150, ErrorMessage = "A idade deve estar entre 0 e 150 anos")]
        public int Age { get; set; }
        
        [StringLength(20, ErrorMessage = "O telefone deve ter no mÃ¡ximo 20 caracteres")]
        public string? Phone { get; set; }
    }
    
    // ðŸ”¥ðŸ”¥ðŸ”¥ CLASSE DE DTO PARA ATUALIZAÃ‡ÃƒO (OPCIONAL)
    public class UpdateUserRequest
    {
        [StringLength(100, ErrorMessage = "O nome deve ter no mÃ¡ximo 100 caracteres")]
        public string? Name { get; set; }
        
        [EmailAddress(ErrorMessage = "Formato de email invÃ¡lido")]
        public string? Email { get; set; }
        
        [Range(0, 150, ErrorMessage = "A idade deve estar entre 0 e 150 anos")]
        public int? Age { get; set; }
        
        [StringLength(20, ErrorMessage = "O telefone deve ter no mÃ¡ximo 20 caracteres")]
        public string? Phone { get; set; }
    }
    
    // ðŸ”¥ðŸ”¥ðŸ”¥ CLASSE DE RESPOSTA PADRONIZADA (OPCIONAL)
    public class UserResponse
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public int Age { get; set; }
        public string? Phone { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        
        public static UserResponse FromUser(User user)
        {
            return new UserResponse
            {
                Id = user.Id,
                Name = user.Name,
                Email = user.Email,
                Age = user.Age,
                Phone = user.Phone,
                CreatedAt = user.CreatedAt,
                UpdatedAt = user.UpdatedAt
            };
        }
    }
}